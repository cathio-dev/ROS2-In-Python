** ROS2 IN PYTHON **

/UNIT 2 - ROS 2 BASIC CONCEPTS/

ros2 run <package_name> <executable_file>: RUN PACKAGE
ros2 launch <package_name> <launch_file>: RUN LAUNCH
ros2 pkg create --build-type ament_python mars_rover_systems --dependencies rclpy: CREATE PKG 

ros2 pkg list: Gives you a list of all the ROS packages in your system.

ros2 pkg list | grep mars_rover_systems: Filters the list to show only the package named mars_rover_systems.

** PYTHON STRUCTURE **

rclcpp: ROS2 client library for C++.
rclpy: ROS2 client library for Python.

** SETUP PY: ** 

'console_scripts': [
            'entry_point_name = entry_point_script_path',
            'another_entry_point_name = another_entry_point_script_path',
            ...
            'still_another_entry_point_name = still_another_entry_point_script_path'
        ],

entry_point_script_path: mars_rover_systems.heartbeat:main:

1) This tells ROS2 that we want to go to a folder inside the package named mars_rover_systems. By default when we create a package, a folder with the EXACT SAME NAME as the package is generated inside it.
2) It then specifies which script inside the folder mars_rover_systems we have to look for, in this case heartbeat.py.
3) Within heartbeat.py ( note the use of a : instead of a .) we specify the method to be executed, in this case, the method named main().


** NODE DECLARATION **

node = Node('mars_rover_1') : NODE DECLARATION
node.get_logger().info(f"{i+1}: MARS ROVER 1 IS ALIVE" + str(ros_time_stamp)) : PRINT IN NODE
node.destroy_node() : DESTROY
ros_time_stamp = node.get_clock().now() : GET TIME


** CODE NODE CUSTOM EXAMPLE: **

class HeartbeatNode(Node):
    def __init__(self, rover_name, timer_period=0.2):
        # call super() in the constructor to initialize the Node object
        # the parameter we pass is the node name
        self._rover_name = rover_name
        super().__init__(self._rover_name)
        # create a timer sending two parameters:
        # - the duration between two callbacks (0.2 seconds)
        # - the timer function (timer_callback)
        self.create_timer(timer_period, self.timer_callback)
        
    def timer_callback(self):
        ros_time_stamp = self.get_clock().now()
        self.get_logger().info(self._rover_name +" is alive..."+str(ros_time_stamp))

MAIN:

# initialize the ROS2 communication
    rclpy.init(args=args)
    # declare the node constructor
    node = HeartbeatNode(rover_name="mars_rover_1", timer_period=1.0)
    # keeps the node alive, waits for a request to kill the node (ctrl+c)
    rclpy.spin(node)
    # shutdown the ROS2 communication
    rclpy.shutdown()



* Compiling: *

  1 - cd ~/ros2_ws
  2 - colcon build (colcon build --packages-select <package name>)
  3 - source install/setup.bash

** LAUNCH FILES **:

STRUCTURE:

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable', #NAME IN ENTRY POINT
            output='screen'),
        Node(
            package='mars_rover_systems',
            executable='heartbeat_executable2',
            output='screen')
    ])

STEP 3:

We need to configure setup.py to ensure that ROS2 can find and access the .launch.py files in the launch folder.
To achieve this, we need to modify the data_files entry.
This entry specifies the locations where ROS2 can find all the files in our package.
We need to change the default:

We added ONE NEW PATH:
os.path.join('share', package_name), glob('launch/*.launch.py'): which specifies the path to our launch.py files.
This approach can be used for any file or folder that you want your ROS2 packages to include.
At the end, your setup.py should look like this:

from setuptools import find_packages, setup
import os
from glob import glob

package_name = 'mars_rover_systems'

setup(
    name=package_name,
    version='0.0.0',
    packages=find_packages(exclude=['test']),
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name), glob('launch/*.launch.py'))
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='user',
    maintainer_email='user@todo.todo',
    description='TODO: Package description',
    license='TODO: License declaration',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'heartbeat_executable = mars_rover_systems.heartbeat:main',
            'heartbeat_executable2 = mars_rover_systems.heartbeat:main2'
        ],
    },
)

TERMINAL: ros2 launch <package> <launch file>


** TOPICS **:

ros2 topic list: list topics
ros2 topic info: info about topic | PUBLISHER, SUBSCRIBER

PUBLISHING IN A TOPIC: ros2 topic pub /cmd_vel geometry_msgs/msg/Twist "{linear: {x: 0.1, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.0}}"

